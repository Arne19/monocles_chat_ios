# build a new stable release and push it to apple
name: quicksy.build-push

# Controls when the action will run.
on:
  # Triggers the workflow on push
  push:
    branches: [ quicksy ]

  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  buildAndPublishStable:
    # The type of runner that the job will run on
    runs-on: self-hosted
    env:
      APP_NAME: "Quicksy"
      BUILD_SCHEME: "Quicksy"
      APP_DIR: "Monal.app"
      BUILD_TYPE: "AppStore"
      EXPORT_OPTIONS_IOS: "../scripts/exportOptions/Quicksy_Stable_iOS_ExportOptions.plist"
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v4
        with:
          clean: true
          submodules: true
          fetch-depth: 100
          fetch-tags: true
          show-progress: true
          lfs: true
      - name: Checkout submodules
        run: git submodule update -f --init --remote
      - name: Get last build tag and increment it
        run: |
          oldBuildNumber=$(git tag --sort="v:refname" |grep "Quicksy_Build_iOS" | tail -n1 | sed 's/Quicksy_Build_iOS_//g')
          buildNumber=$(expr $oldBuildNumber + 1)
          echo "New buildNumber is $buildNumber"
          git tag Quicksy_Build_iOS_$buildNumber
      - name: Insert buildNumber into plists
        run: sh ./scripts/set_version_number.sh
      - name: Import TURN secrets
        run: |
          if [[ -e "/Users/ci/secrets.quicksy_stable" ]]; then
            echo "#import \"/Users/ci/secrets.quicksy_stable\"" > Monal/Classes/secrets.h
          fi
      - name: Make our build scripts executable
        run: chmod +x ./scripts/build.sh
      - name: Run build
        run: ./scripts/build.sh
      - name: validate ios app
        run: xcrun altool --validate-app --file ./Monal/build/ipa/Monal.ipa --type ios -u $(cat /Users/ci/apple_connect_upload_mail.txt) -p "$(cat /Users/ci/apple_connect_upload_secret.txt)"
      - name: push tag to stable repo
        run: |
          buildNumber=$(git tag --sort="v:refname" | grep "Quicksy_Build_iOS" | tail -n1 | sed 's/Quicksy_Build_iOS_//g')
          git push origin Build_iOS_$buildNumber
      - name: Extract version number and changelog from newest merge commit
        id: releasenotes
        run: |
          buildNumber=$(git tag --sort="v:refname" | grep "Quicksy_Build_iOS" | tail -n1 | sed 's/Quicksy_Build_iOS_//g')
          mkdir -p /Users/ci/releases
          OUTPUT_FILE="/Users/ci/releases/$buildNumber.output"
          touch "$OUTPUT_FILE"
          echo "OUTPUT_FILE=$OUTPUT_FILE" | tee /dev/stderr >> "$GITHUB_OUTPUT"
          
          echo "buildNumber=$buildNumber" | tee /dev/stderr >> "$OUTPUT_FILE"
          echo "tag=Quicksy_Build_iOS_$buildNumber" | tee /dev/stderr >> "$OUTPUT_FILE"
          echo "version=$(git log -n 1 --merges --pretty=format:%s | sed -E 's/^[\t\n ]*([^\n\t ]+)[\t\n ]+\(([^\n\t ]+)\)[\t\n ]*$/\1/g')" | tee /dev/stderr >> "$OUTPUT_FILE"
          
          echo "name=Quicksy $(git log -n 1 --merges --pretty=format:%s | sed -E 's/^[\t\n ]*([^\n\t ]+)[\t\n ]+\(([^\n\t ]+)\)[\t\n ]*$/\1 (Build '$buildNumber', PR \2)/g')" | tee /dev/stderr >> "$OUTPUT_FILE"
          
          echo "notes<<__EOF__" | tee /dev/stderr >> "$OUTPUT_FILE"
          echo "$(git log -n 1 --merges --pretty=format:%b)" | sed -e ':a' -e 'N' -e '$!ba' -e 's/\n\([^-]\)/ \1/g' | sed -E 's/^[\t\n ]*IOS_ONLY[\t\n ]*(.*)$/\1/g' | sed -E 's/^[\t\n ]*MACOS_ONLY[\t\n ]*(.*)$/\1/g' | tee /dev/stderr >> "$OUTPUT_FILE"
          echo "__EOF__" | tee /dev/stderr >> "$OUTPUT_FILE"
          
          echo "notes_ios<<__EOF__" | tee /dev/stderr >> "$OUTPUT_FILE"
          echo "$(git log -n 1 --merges --pretty=format:%b)" | sed -e ':a' -e 'N' -e '$!ba' -e 's/\n\([^-]\)/ \1/g' | grep -v '^[\t\n ]*MACOS_ONLY.*$' | sed -E 's/^[\t\n ]*IOS_ONLY[\t\n ]*(.*)$/\1/g' | tee /dev/stderr >> "$OUTPUT_FILE"
          echo "__EOF__" | tee /dev/stderr >> "$OUTPUT_FILE"
          
          cat "$OUTPUT_FILE" >> "$GITHUB_OUTPUT"
      - name: Create fastlane metadata directory
        id: metadata
        env:
          CHANGELOG: ${{ steps.releasenotes.outputs.notes_ios }}
        run: |
          path="$(mktemp -d)"
          echo -n "$CHANGELOG" > "$path/release_notes.txt"
          echo "path=$path" | tee /dev/stderr >> "$GITHUB_OUTPUT"
      - name: Publish ios to appstore connect
        #run: xcrun altool --upload-app --file ./Monal/build/ipa/Monal.ipa --type ios --asc-provider S8D843U34Y --team-id S8D843U34Y -u $(cat /Users/ci/apple_connect_upload_mail.txt) -p "$(cat /Users/ci/apple_connect_upload_secret.txt)"
        env:
          DELIVER_METADATA_PATH: ${{ steps.metadata.outputs.path }}
        run: |
          fastlane run upload_to_app_store api_key_path:"/Users/ci/appstoreconnect/key.json" team_id:"S8D843U34Y" ipa:"./Monal/build/ipa/Monal.ipa" app_version:"${{ steps.releasenotes.outputs.version }}" reject_if_possible:true submit_for_review:true automatic_release:true skip_metadata: true skip_screenshots: true
      - name: Remove fastlane metadata directory
        run: |
          rm -rf "${{ steps.metadata.outputs.path }}"
      - uses: actions/upload-artifact@v4
        with:
          name: monal-ios
          path: Monal/build/ipa/Monal.ipa
          if-no-files-found: error
      # - uses: actions/upload-artifact@v4
      #   with:
      #     name: monal-ios-dsym
      #     path: Monal/build/ios_Monal.xcarchive/dSYMs
      #     if-no-files-found: error
